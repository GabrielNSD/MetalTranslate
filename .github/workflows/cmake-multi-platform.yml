# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: ["node-ffi-mac", "node-ffi-linux"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
        type: choice
        options:
          - info
          - warning
          - debug

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [macos-13, ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          # - os: windows-latest
          #   c_compiler: cl
          #   cpp_compiler: cl
          - os: macos-13
            arch: x64
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          # - os: ubuntu-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++
        exclude:
          # - os: windows-latest
          #   c_compiler: gcc
          # - os: windows-latest
          #   c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install oneDNN
        if: runner.os == 'macOS'
        run: brew install onednn

      - name: Install libdnnl-dev
        if: runner.os == 'Linux'
        run: sudo apt install -y libdnnl-dev

      - name: Update submodules
        if: runner.os == 'Linux'
        run: git submodule update --init --recursive

      - name: Verify dependencies
        if: runner.os == 'macOS'
        run: |
          brew list icu4c
          brew list onednn
          echo "ICU4C include directory: $(brew --prefix icu4c)/include"
          echo "ICU4C library directory: $(brew --prefix icu4c)/lib"
          echo "oneDNN include directory: $(brew --prefix onednn)/include"
          echo "oneDNN library directory: $(brew --prefix onednn)/lib"

      - name: Configure CMake
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            export ICU_ROOT=$(brew --prefix icu4c)
            export CMAKE_PREFIX_PATH=$ICU_ROOT
            export PKG_CONFIG_PATH=$ICU_ROOT/lib/pkgconfig:$PKG_CONFIG_PATH
            export LDFLAGS="-L$ICU_ROOT/lib $LDFLAGS"
            export CPPFLAGS="-I$ICU_ROOT/include $CPPFLAGS"
            export PATH="$ICU_ROOT/bin:$PATH"
          fi
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DWITH_MKL=OFF -DOPENMP_RUNTIME=NONE -DWITH_DNNL=ON -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            export ICU_ROOT=$(brew --prefix icu4c)
            export CMAKE_PREFIX_PATH=$ICU_ROOT
            export PKG_CONFIG_PATH=$ICU_ROOT/lib/pkgconfig:$PKG_CONFIG_PATH
            export LDFLAGS="-L$ICU_ROOT/lib $LDFLAGS"
            export CPPFLAGS="-I$ICU_ROOT/include $CPPFLAGS"
            export PATH="$ICU_ROOT/bin:$PATH"
          fi
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Create ZIP file containing .dylib files
        if: runner.os == 'macOS'
        run: |
          mkdir -p ${{ steps.strings.outputs.build-output-dir }}/libs
          cp ${{ steps.strings.outputs.build-output-dir }}/libmetaltranslate.dylib ${{ steps.strings.outputs.build-output-dir }}/libs/
          cp ${{ steps.strings.outputs.build-output-dir }}/libdnnl.3.5.dylib ${{ steps.strings.outputs.build-output-dir }}/libs/libdnnl.3.dylib
          cp ${{ steps.strings.outputs.build-output-dir }}/libicuuc.74.2.dylib ${{ steps.strings.outputs.build-output-dir }}/libs/libicuuc.74.dylib
          cp ${{ steps.strings.outputs.build-output-dir }}/libicudata.74.2.dylib ${{ steps.strings.outputs.build-output-dir }}/libs/libicudata.74.dylib
          cp ${{ steps.strings.outputs.build-output-dir }}/external/lib/libctranslate2.4.3.1.dylib ${{ steps.strings.outputs.build-output-dir }}/libs/libctranslate2.4.dylib
          cp ${{ steps.strings.outputs.build-output-dir }}/external/lib/libOpenNMTTokenizer.dylib ${{ steps.strings.outputs.build-output-dir }}/libs/
          cd ${{ steps.strings.outputs.build-output-dir }}
          zip -r libmetaltranslate.zip libs

      - name: Create ZIP file containing .so files
        if: runner.os == 'Linux'
        run: |
          mkdir -p ${{ steps.strings.outputs.build-output-dir }}/libs
          cp ${{ steps.strings.outputs.build-output-dir }}/libmetaltranslate.so ${{ steps.strings.outputs.build-output-dir }}/libs/
          cp ${{ steps.strings.outputs.build-output-dir }}/libdnnl.so ${{ steps.strings.outputs.build-output-dir }}/libs/
          cp ${{ steps.strings.outputs.build-output-dir }}/libctranslate2.so ${{ steps.strings.outputs.build-output-dir }}/libs/
          cp ${{ steps.strings.outputs.build-output-dir }}/libOpenNMTTokenizer.so ${{ steps.strings.outputs.build-output-dir }}/libs/
          cd ${{ steps.strings.outputs.build-output-dir }}
          zip -r libmetaltranslate.zip libs

      - name: Upload ZIP artifact
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: libmetaltranslate
          path: ${{ steps.strings.outputs.build-output-dir }}/libmetaltranslate.zip
